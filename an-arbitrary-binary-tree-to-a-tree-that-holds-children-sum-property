#include<iostream>

using namespace std;

struct node{
	int data;
	node *left, *right;
};

node *newNode(int data){
	node *temp = new node;
	temp->left = temp->right = NULL;
	temp->data = data;

	return temp;
}


void inOrder(node *root){
	if (root==NULL) return ;

	inOrder(root->left);
	cout << root->data << " ";
	inOrder(root->right);
}


void changeToChildren(node *root){
	if (root==NULL) return ;

	changeToChildren(root->left);
	changeToChildren(root->right);

	if (root->left!=NULL || root->right==NULL){
	    int left = 0, right = 0, diff;

	    if (root->left!=NULL) left = root->left->data;
	    if (root->right!=NULL) right = root->right->data;

	    diff = left + right - root->data;

	    if (diff>0) root->data += diff;
	    else{
	        int flag = 1;
	        node *temp = root;
	        while(flag==1){
	            if (temp->left==NULL && temp->right==NULL) flag = 0;

	            else if (temp->left!=NULL){
	              temp->left->data -= diff;
	              temp = temp->left;
	            }
	            else if (temp->right!=NULL){
	              temp->right->data -= diff;
	              temp = temp->right;
	            }
	        }
	    }
	}
}

int main(){
	node *root = newNode(50);
	root->left        = newNode(7);
	root->right       = newNode(2);
	root->left->left  = newNode(3);
	root->left->right = newNode(5);
	root->right->left  = newNode(1);
	root->right->right = newNode(30);

	cout << "Before Changes InOrder Traversal: ";
	inOrder(root);

	changeToChildren(root);

	cout << "\nAfter Changes InOrder Traversal: ";
	inOrder(root);
	
	return 0;
}